<?php

namespace Core\Utils\Front;

use PhpParser\Node\Expr\FuncCall;
use Core\Helpers\PathResolver;

class FrontPageScript
{
    // Retorna o conteúdo HTML da tela de instalação
    private function install()
    {
        return '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>EchoStack - Install</title><link rel="icon" href="assets/favicon.png" /><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" /><style> *, *::before, *::after { box-sizing: border-box; } body { background-color: #0f172a; font-family: system-ui, sans-serif; color: #e2e8f0; display: flex; flex-direction: column; align-items: center; justify-content: center; min-height: 100vh; margin: 0; padding: 40px 0; } .lang-select { position: fixed; top: 20px; right: 30px; z-index: 999; } .lang-select select { background-color: #1e293b; color: #e2e8f0; border: none; padding: 6px; border-radius: 6px; } .container { background-color: #1e293b; padding: 40px; border-radius: 12px; width: 100%; max-width: 600px; margin: 0 30px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); } .logo { font-family: "JetBrains Mono", monospace; font-size: 2.2rem; font-weight: 700; color: #fff; margin-bottom: 20px; display: flex; align-items: center; justify-content: center; } .cursor { display: inline-block; width: 0.6ch; height: 1em; background-color: currentColor; margin-left: 4px; animation: blink 1s steps(2, start) infinite; vertical-align: bottom; } @keyframes blink { to { visibility: hidden; } } .status-ok { color: #22c55e; } .status-error { color: #f87171; } form { display: flex; flex-direction: column; gap: 1px; width: 100%; } label { margin-top: 16px; margin-bottom: 6px; font-weight: 600; } input, select { width: 100%; padding: 10px; border-radius: 6px; border: none; background-color: #334155; color: #e2e8f0; font-size: 1rem; } input:focus { outline: 2px solid #3b82f6; } button { width: 100%; padding: 12px; margin-top: 24px; border: none; border-radius: 6px; background-color: #3b82f6; color: white; font-weight: bold; font-size: 1rem; cursor: pointer; transition: background-color 0.3s ease; } button:hover { background-color: #2563eb; } .password-wrapper { position: relative; display: flex; align-items: center; width: 100%; } .password-wrapper input { flex: 1; width: 100%; padding-right: 38px; /* Espaço pro ícone */ } .password-wrapper { position: relative; display: flex; align-items: center; width: 100%; } .password-wrapper input { flex: 1; width: 100%; padding-right: 38px; /* Espaço pro ícone */ } #togglePassword { position: absolute; right: 12px; font-size: 1rem; color: #94a3b8; cursor: pointer; } .form-label { margin-top: 16px; margin-bottom: 6px; font-weight: 600; display: block; } .form-control { width: 100%; padding: 10px; border-radius: 6px; border: none; background-color: #334155; color: #e2e8f0; font-size: 1rem; } .form-control:focus { outline: 2px solid #3b82f6; } </style></head><body><div class="lang-select"><select id="langSelect"></select></div><div class="container"><div class="logo"><span id="logoText"></span><span class="cursor"></span></div><p class="intro" id="introText"></p><p id="phpStatus"></p><ul class="checklist" id="extensionList"></ul><p class="form-intro" id="dbIntroText"></p><form id="installForm"><label id="labelDriver" for="dbdriver" class="form-label">Driver</label ><select id="dbdriver" name="DB_DRIVER" required class="form-control"><option value="none" id="none"></option><option value="mysql">MySQL</option><option value="pgsql">PostgreSQL</option><option value="sqlite">SQLite</option></select><div id="groupHost"><label id="labelHost" for="dbhost" class="form-label">Host</label ><input type="text" id="dbhost" name="DB_HOST" class="form-control" /></div><label id="labelName" for="dbname" class="form-label">Database</label ><input type="text" id="dbname" name="DB_NAME" class="form-control" required /><div id="groupUser"><label id="labelUser" for="dbuser" class="form-label">User</label ><input type="text" id="dbuser" name="DB_USER" class="form-control" autocomplete="username" /></div><div id="groupPass"><label id="labelPass" for="dbpass" class="form-label">Password</label><div class="password-wrapper"><input type="password" id="dbpass" name="DB_PASS" class="form-control" autocomplete="current-password" /><i class="fas fa-eye" id="togglePassword"></i></div></div><label id="labelUrl" for="appurl" class="form-label">App URL</label ><input type="url" id="appurl" name="APP_URL" class="form-control" /><label for="timezone" id="labelTimezone" class="form-label" >Time Zone</label ><select id="timezone" name="TIME_ZONE" class="form-control"></select ><button type="submit" id="submitBtn">Submit</button></form></div><script> const langSelect = document.getElementById("langSelect"); function toggleGroup(id, show) { const el = document.getElementById(id); if (el) el.style.display = show ? "block" : "none"; } function setRequired(id, required) { const input = document.getElementById(id); if (input) { if (required) input.setAttribute("required", true); else input.removeAttribute("required"); } } function clearValue(id) { const input = document.getElementById(id); if (input) input.value = ""; } function toggleDriverFields() { const driver = document.getElementById("dbdriver").value; const isSQLite = driver === "sqlite"; const isNone = driver === "none"; toggleGroup("groupHost", !isSQLite && !isNone); toggleGroup("groupUser", !isSQLite && !isNone); toggleGroup("groupPass", !isSQLite && !isNone); toggleGroup("labelName", !isNone); toggleGroup("dbname", !isNone); setRequired("dbhost", !isSQLite && !isNone); setRequired("dbuser", !isSQLite && !isNone); setRequired("dbpass", !isSQLite && !isNone); setRequired("dbname", !isNone); if (isNone) { ["dbhost", "dbuser", "dbpass", "dbname"].forEach(clearValue); } } document .getElementById("togglePassword") .addEventListener("click", () => { const input = document.getElementById("dbpass"); input.type = input.type === "password" ? "text" : "password"; }); document .getElementById("installForm") .addEventListener("submit", async function (e) { e.preventDefault(); const form = e.target; const formData = new FormData(form); const lang = localStorage.getItem("lang") || "en"; formData.append("LANGUAGE", lang); const data = new URLSearchParams(formData); try { const res = await fetch(`/v0/${lang}`, { method: "POST", headers: { "Content-Type": "application/x-www-form-urlencoded" }, body: data, }); const result = await res.json(); if (result.success) { window.location.href = "/hello"; } else { alert("Falha ao salvar configuração."); } } catch (err) { console.error("Erro ao enviar dados:", err); alert("Erro ao enviar dados."); } }); async function loadInstaller(lang = "en") { const res = await fetch(`/v0/${lang}`); const data = await res.json(); langSelect.innerHTML = ""; data.available_languages.forEach((code) => { const opt = document.createElement("option"); opt.value = code; opt.text = code.toUpperCase(); if (code === lang) opt.selected = true; langSelect.appendChild(opt); }); document.getElementById("logoText").textContent = data.translation.logo; document.getElementById("introText").textContent = data.translation.check_intro; document.getElementById("dbIntroText").textContent = data.translation.db_intro; document.getElementById("labelDriver").textContent = data.translation.form_labels.db_driver; document.getElementById("labelHost").textContent = data.translation.form_labels.db_host; document.getElementById("labelName").textContent = data.translation.form_labels.db_name; document.getElementById("labelUser").textContent = data.translation.form_labels.db_user; document.getElementById("labelPass").textContent = data.translation.form_labels.db_pass; document.getElementById("labelUrl").textContent = data.translation.form_labels.app_url; document.getElementById("labelTimezone").textContent = data.translation.form_labels.time_zone || "Time Zone"; document.getElementById("none").textContent = data.translation.none || "None"; document.getElementById("appurl").placeholder = data.translation.form_placeholder?.app_url || ""; document.getElementById("submitBtn").textContent = data.translation.submit_button; const phpStatus = document.getElementById("phpStatus"); phpStatus.textContent = `${data.translation.php_version}: ${data.php_version} ` + (data.php_valid ? "✅" : data.translation.php_version_required); phpStatus.className = data.php_valid ? "status-ok" : "status-error"; const extensionList = document.getElementById("extensionList"); extensionList.innerHTML = ""; for (const [ext, isLoaded] of Object.entries( data.required_extensions )) { const li = document.createElement("li"); li.innerHTML = `${ isLoaded ? "✅" : "❌" } ${ext} <span class="status-ok">${ data.translation.extension_required }</span>`; extensionList.appendChild(li); } const env = data.env || {}; document.getElementById("dbdriver").value = env.DB_DRIVER || "mysql"; document.getElementById("dbhost").value = env.DB_HOST || "localhost"; document.getElementById("dbname").value = env.DB_NAME || ""; document.getElementById("dbuser").value = env.DB_USER || ""; document.getElementById("dbpass").value = env.DB_PASS || ""; document.getElementById("appurl").value = env.APP_URL || ""; const timezoneSelect = document.getElementById("timezone"); timezoneSelect.innerHTML = ""; const selectedTZ = env.TIME_ZONE || "UTC"; const allTimezones = Intl.supportedValuesOf("timeZone"); allTimezones.forEach((tz) => { const opt = document.createElement("option"); opt.value = tz; opt.textContent = tz; if (tz === selectedTZ) opt.selected = true; timezoneSelect.appendChild(opt); }); toggleDriverFields(); } langSelect.addEventListener("change", (e) => { const lang = e.target.value; localStorage.setItem("lang", lang); loadInstaller(lang); }); document .getElementById("dbdriver") .addEventListener("change", toggleDriverFields); window.addEventListener("DOMContentLoaded", () => { const lang = localStorage.getItem("lang") || "en"; loadInstaller(lang); }); </script></body></html>';
    }

    // Retorna o conteúdo HTML da tela principal
    private function index()
    {
        return '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="robots" content="noindex, nofollow" /><link rel="icon" href="assets/favicon.png" /><title>EchoStack</title><!-- Font Awesome CDN --><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" /><style> @import url("https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@600;700&display=swap"); * { margin: 0; padding: 0; box-sizing: border-box; } html, body { height: 100%; font-family: system-ui, sans-serif; background-color: #0f172a; color: #e2e8f0; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; animation: fadeIn 0.6s ease-in-out; } @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } .logo { font-family: "JetBrains Mono", monospace; font-size: 2.2rem; font-weight: 700; color: #fff; margin-bottom: 20px; display: flex; align-items: center; justify-content: center; } .cursor { display: inline-block; width: 0.6ch; height: 1em; background-color: currentColor; margin-left: 4px; animation: blink 1s steps(2, start) infinite; vertical-align: bottom; } @keyframes blink { to { visibility: hidden; } } .version { font-size: 1.1rem; font-weight: bold; margin-bottom: 10px; } #error-message { color: #ef4444; margin-bottom: 20px; max-width: 80%; font-size: 0.95rem; line-height: 1.4; } .info { font-size: 1rem; opacity: 0.7; margin-bottom: 30px; } .info a { color: #38bdf8; text-decoration: none; } .info a:hover { text-decoration: underline; } .status-box { display: none; gap: 20px; margin-top: 10px; } .status-item { background-color: #1e293b; padding: 10px 16px; border-radius: 8px; font-size: 0.9rem; display: flex; align-items: center; gap: 8px; } .status-item i { font-size: 1rem; } .status-ok { color: #22c55e; } .status-warn { color: #facc15; } .status-fail { color: #ef4444; } .status-label { opacity: 0.8; } </style></head><body><div class="logo">&gt;EchoStack<span class="cursor"></span></div><div class="version" id="version">Loading...</div><div id="error-message"></div><p class="info"> To test the API, access <a href="/v1/health">/v1/health</a><br /><small> View the docs at <a href="https://github.com/jandersongarcia/EchoStack" target="_blank"> EchoStack on GitHub </a></small></p><div class="status-box" id="statusBox"><div class="status-item"><i class="fas fa-database"></i><span class="status-label">DB:</span><span id="status-db">–</span></div><div class="status-item"><i class="fas fa-file-alt"></i><span class="status-label">Logs:</span><span id="status-logs">–</span></div><div class="status-item"><i class="fab fa-telegram-plane"></i><span class="status-label">Telegram:</span><span id="status-telegram">–</span></div></div><script> fetch("/v1/health") .then(async (response) => { if (!response.ok) { throw { message: "API responded with an error", code: response.status }; } const text = await response.text(); if (!text.trim()) { throw { message: "No response received from the API. Please check the error logs in storage/logs.", }; } let data; try { data = JSON.parse(text); } catch (e) { throw { message: "Invalid JSON returned by API. Please check the error logs in storage/logs.", }; } if (data?.error) throw data; document.getElementById("version").textContent = ""; document.getElementById("statusBox").style.display = "flex"; const mapStatus = (val) => { if (["activated", "connected", "configured"].includes(val)) return ["status-ok", val]; if (["warn_empty", "not_configured"].includes(val)) return ["status-warn", val]; return ["status-fail", val]; }; [ ["status-db", data.database], ["status-logs", data.logs], ["status-telegram", data.telegram], ].forEach(([id, val]) => { const [cls, label] = mapStatus(val); const el = document.getElementById(id); el.textContent = label; el.classList.add(cls); }); }) .catch((error) => { const errMsg = error?.message || "No response received from the API. Please check the error logs in storage/logs."; const errCode = error?.code ? ` (Code: ${error.code})` : ""; if (error.code == "E002"){ window.location.href = "/install.html"; } document.getElementById("version").textContent = ""; document.getElementById("error-message").textContent = errMsg + errCode; document.getElementById("statusBox").style.display = "none"; });</script></body></html>';
    }

    /**
     * Cria dinamicamente um arquivo HTML dentro da pasta /app baseado no nome da página.
     *
     * @param string $page Nome da página, ex: "install" ou "index"
     * @return bool Retorna true se a página for criada com sucesso, false se falhar
     */
    public function createPage(string $page): bool
    {
        // Garante que o método solicitado exista na classe
        if (!method_exists($this, $page)) {
            return false;
        }

        // Executa o método dinâmico (ex: $this->install() ou $this->index())
        $htmlContent = $this->$page();

        // Define o caminho completo do arquivo HTML a ser criado
        $filePath = PathResolver::basePath() . '/app/' . $page . '.html';

        // Cria o diretório /app caso ele ainda não exista
        if (!is_dir(dirname($filePath))) {
            mkdir(dirname($filePath), 0755, true);
        }

        // Escreve o conteúdo HTML no arquivo
        return file_put_contents($filePath, $htmlContent) !== false;
    }
}